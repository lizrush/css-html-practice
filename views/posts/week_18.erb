 date: 2014-03-28

<h2> Using Local Storage and a RESTAdaptor in Ember.js</h2>

<p>
These last two weeks we have been working on a new project- building an online store. While we tried to do this as out first large rails app, the twist on this two week project was that we were also going to be learning the ember javascript framework! Because Ember's slogan is that it is a "framework for creating ambitious web applications", I decided that I would try using local storage for the first time in addition to our project's requirement to have the app hooked up to a rails app for our data.

</p><p>

This short walkthrough is going to assume some basic familiarity with ember. You should already have an application up an running with fixture data- this walk through is going to assume you used the ember . You can follow the Ember guides tutorial to get up to speed <a href="http://emberjs.com/guides/">here.</a>

</p><p>

The first thing we are going to do is hook our application up with the REST Adaptor. In your main.js, place this code:<br>

<code>
var App = Ember.Application.create({});<br>

App.Store = DS.Store.extend({<br>
  adapter: DS.RESTAdapter.extend({<br>
    host: "http://localhost:3000"<br>
  })<br>
});<br>
</code>

<p>Of course, replace the host with the uri of your data source and remove all the fixture data from your models. At this point, you should have the exact same app you had with fixture data, but now each model should return data from your API.<br><br>
Before:
<br>
<img src="/pics/fixturedata.png"/>
<br>
After:
<img src="/pics/restdata.png"/>
<br><br>

Now we have an ember app pulling data from the API. Why should you now use local storage? Well, the reason I chose to use local storage was because I could. The second reason was because I thought it would provide and interesting way to implement a store cart where I would no longer need to call the API when a user adds items to their cart. In this use of local storage, we are going to create 'item' records in the client's local storage when they click "add to cart".</p><p>
<img src="/pics/localstorage.png"/><br>
As you can see above, I have added the first few lines defining the adaptor for Item so as to override the RESTAdaptor in the main.js that we previously set up. This will only apply to the Item model. If you're wondering how LSAdaptor is defined- well, that's the next step. Download the Local Storage adaptor from its source <a href="https://raw.github.com/rpflorence/ember-localstorage-adapter/master/localstorage_adapter.js"> here</a>.

</p><p>

Take that file and copy it into your application under the scripts directory. If you have an index.html that lists all the required scripts, be sure to add it there as well. This localstorage aware adaptor is what is going to talk to the client and create the records and relationships there. Be sure to peruse the code so you can see what's happening. This also will give you insight into what the REST adaptor is doing under the hood.</p><p>
Now even if you had you app all pieced together correctly with fixture data and/or the REST adaptor, this will not work quite yet. You'll have to ensure that anywhere that you wish to create, update, modify or delete something from your local storage, you must first specify the model that uses the adaptor. So in the example below, you'll see that when I want to add a product to my cart (in this case, creating a record in local storage), I actually must start out by saying this.store.find('item') so that ember knows to go look in the model for 'item'. And as we set before in the model, the REST adaptor is overwritten so that it uses the LSAdaptor.</p>
<img src="/pics/addtocart.png"/>
<br>
<p>
  And that's basically the overview of how to use both a REST adaptor and a local storage adaptor in ember. You could of course make all sorts of combinations, like local storage and fixture data, or fixture data and a REST adaptor. The important part is to remember to specify the adaptor in whichever model you want to be different and to make your app go look for that model (and adaptor) before you try to modify the data therein. After you get the adaptors set up, it's a matter of finding all those actions where you need to access that model's adaptor and making sure that it's specified so the action know where to look. Easy peasy!
</p>
<br>
<h5><a href="/blog"> back </a></h5>
